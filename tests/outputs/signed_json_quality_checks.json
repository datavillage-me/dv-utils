{
  "payload": "",
  "protected": "eyJhbGciOiAiUlMyNTYiLCAieDV1IjogImh0dHBzOi8vYXBpLmdrZS5kYXRhdmlsbGFnZS5tZS9jb2xsYWJvcmF0aW9uU3BhY2VzL2VrbWRrYmZhL3B1YmxpY0tleSJ9",
  "signature": "My9mO1L/jeV9uW/XHoVYV4JHnhmg3XaPZBqi/b3S4iBs3dPw4pTxzT0y4eq9suVhMky/i+qzsvXvKUZPyRdec78smDDiFn3EDW5aDjqIoW02/jpbu1FyVq3V0hrrh2ybxhbuqeyVu76Eg9WDQCtV/EoybfQxXe70dyVaUb1C5lw+LpmpxEd8CBzAyFoCUjJcXGw+yfCtOC1aUsjtP4S1pIKkWza7FIq6W2AOk6kfnPHOr037DVYmhJtV/caofSVt9SvCaubBkW1521PiDumgyXDyWQoOcLqk/y5de1mNfvDxU0wav4ewdX8Wrj397xTBZF4J8Y6SqQ7SivgIdIg+wQ=="
}
